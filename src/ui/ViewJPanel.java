/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;


import model.UberHistory;
import model.Uber;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Sri Vyshnavi
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    UberHistory history;
    public ViewJPanel(UberHistory history) {
        initComponents();
        
        this.history = history;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblViewCarInfo = new javax.swing.JTable();
        btnViewCarDetails = new javax.swing.JButton();
        btnDeleteCarDetails = new javax.swing.JButton();
        txtLastUpdated = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        lblMaintenanceCertExpDate = new javax.swing.JLabel();
        txtModelNumber = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSerialNumber = new javax.swing.JTextField();
        chkboxAvailable = new java.awt.Checkbox();
        lblCarModelNum = new javax.swing.JLabel();
        txtManufacturer = new javax.swing.JTextField();
        lblCarSerialNum = new javax.swing.JLabel();
        txtManufacturedDate = new javax.swing.JTextField();
        lblCarManufacturer = new javax.swing.JLabel();
        txtSeatCap = new javax.swing.JTextField();
        lblManufacturedDate = new javax.swing.JLabel();
        txtUsedByPF = new javax.swing.JTextField();
        lblSeatCapacity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblUsedBy = new javax.swing.JLabel();
        txtMaintenanceCertExpDate = new javax.swing.JTextField();
        lblLastUpdated = new javax.swing.JLabel();
        btnAllAvailableCars = new javax.swing.JButton();
        comboBoxCarManufacturer = new javax.swing.JComboBox<>();
        btnFirstAvailableCar = new javax.swing.JButton();
        lblManufacturerFilter = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        btnUpdate = new javax.swing.JButton();
        btnManufacturedDateFilter = new javax.swing.JButton();
        txtManufacturedDateFilter = new javax.swing.JTextField();
        btnSNFilter = new javax.swing.JButton();
        txtSNFilter = new javax.swing.JTextField();
        btnCityFilter = new javax.swing.JButton();
        txtCityFilter = new javax.swing.JTextField();
        btnLastUpdate = new javax.swing.JButton();
        txtLastUpdateFilter = new javax.swing.JTextField();
        btnMC = new javax.swing.JButton();
        txtMC = new javax.swing.JTextField();
        btnCarsUsedby = new javax.swing.JButton();
        txtCarsUsedBY = new javax.swing.JTextField();
        btnNotAvailable = new javax.swing.JButton();

        setBackground(new java.awt.Color(159, 227, 250));
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Palatino", 3, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CAR INVENTORY");

        tblViewCarInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Model Number", "Vin Number", "Manufacturer", "Manufactured Date", "Seat Capacity", "Is Available", "City", "UsedBy", "Last Update", "Maintenance Certificate"
            }
        ));
        jScrollPane1.setViewportView(tblViewCarInfo);

        btnViewCarDetails.setBackground(new java.awt.Color(255, 255, 216));
        btnViewCarDetails.setForeground(new java.awt.Color(51, 51, 51));
        btnViewCarDetails.setText("View");
        btnViewCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCarDetailsActionPerformed(evt);
            }
        });

        btnDeleteCarDetails.setBackground(new java.awt.Color(255, 255, 216));
        btnDeleteCarDetails.setForeground(new java.awt.Color(51, 51, 51));
        btnDeleteCarDetails.setText("Delete");
        btnDeleteCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarDetailsActionPerformed(evt);
            }
        });

        lblCity.setText("City:");

        lblMaintenanceCertExpDate.setText("Maintenance Certificate Expiry Date:");

        txtModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumberActionPerformed(evt);
            }
        });

        jLabel2.setText("Is Available:");

        chkboxAvailable.setLabel("Is Available");

        lblCarModelNum.setText("Model Number:");

        lblCarSerialNum.setText("Serial Number:");

        lblCarManufacturer.setText("Manufacturer:");

        lblManufacturedDate.setText("Manufactured Date:");

        lblSeatCapacity.setText("Seat Capacity:");

        lblUsedBy.setText("Used By Platform:");

        lblLastUpdated.setText("Last Updated:");

        btnAllAvailableCars.setBackground(new java.awt.Color(255, 255, 216));
        btnAllAvailableCars.setForeground(new java.awt.Color(51, 51, 51));
        btnAllAvailableCars.setText("Currently All Available Cars");
        btnAllAvailableCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllAvailableCarsActionPerformed(evt);
            }
        });

        comboBoxCarManufacturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "BMW", "Honda", "Mahindra", "Chevrolet", "Audi", "Toyota", "Mercedes Benz", "Ford", "Tesla", "Lamborghini" }));
        comboBoxCarManufacturer.setSelectedIndex(-1);
        comboBoxCarManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCarManufacturerActionPerformed(evt);
            }
        });

        btnFirstAvailableCar.setBackground(new java.awt.Color(255, 255, 216));
        btnFirstAvailableCar.setForeground(new java.awt.Color(51, 51, 51));
        btnFirstAvailableCar.setText("First Available Passenger Car");
        btnFirstAvailableCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailableCarActionPerformed(evt);
            }
        });

        lblManufacturerFilter.setBackground(new java.awt.Color(255, 255, 216));
        lblManufacturerFilter.setForeground(new java.awt.Color(51, 51, 51));
        lblManufacturerFilter.setText("Manufacturer");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 681, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        btnUpdate.setBackground(new java.awt.Color(204, 255, 204));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnManufacturedDateFilter.setBackground(new java.awt.Color(255, 255, 216));
        btnManufacturedDateFilter.setForeground(new java.awt.Color(51, 51, 51));
        btnManufacturedDateFilter.setText("Filter using year of manufacture");
        btnManufacturedDateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturedDateFilterActionPerformed(evt);
            }
        });

        txtManufacturedDateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufacturedDateFilterActionPerformed(evt);
            }
        });

        btnSNFilter.setBackground(new java.awt.Color(255, 255, 216));
        btnSNFilter.setForeground(new java.awt.Color(51, 51, 51));
        btnSNFilter.setText("Filter Based on VIN Number");
        btnSNFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSNFilterActionPerformed(evt);
            }
        });

        txtSNFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSNFilterActionPerformed(evt);
            }
        });

        btnCityFilter.setBackground(new java.awt.Color(255, 255, 216));
        btnCityFilter.setForeground(new java.awt.Color(51, 51, 51));
        btnCityFilter.setText("Cars Available in a given City");
        btnCityFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityFilterActionPerformed(evt);
            }
        });

        txtCityFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityFilterActionPerformed(evt);
            }
        });

        btnLastUpdate.setBackground(new java.awt.Color(255, 255, 216));
        btnLastUpdate.setForeground(new java.awt.Color(51, 51, 51));
        btnLastUpdate.setText("Catalog Last Updated Filter");
        btnLastUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastUpdateActionPerformed(evt);
            }
        });

        txtLastUpdateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastUpdateFilterActionPerformed(evt);
            }
        });

        btnMC.setBackground(new java.awt.Color(255, 255, 216));
        btnMC.setForeground(new java.awt.Color(51, 51, 51));
        btnMC.setText("Filter Using Expired Maintainence Certificate");
        btnMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMCActionPerformed(evt);
            }
        });

        txtMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMCActionPerformed(evt);
            }
        });

        btnCarsUsedby.setBackground(new java.awt.Color(255, 255, 216));
        btnCarsUsedby.setForeground(new java.awt.Color(51, 51, 51));
        btnCarsUsedby.setText("Cars used by Filter");
        btnCarsUsedby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarsUsedbyActionPerformed(evt);
            }
        });

        txtCarsUsedBY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarsUsedBYActionPerformed(evt);
            }
        });

        btnNotAvailable.setBackground(new java.awt.Color(255, 255, 216));
        btnNotAvailable.setForeground(new java.awt.Color(51, 51, 51));
        btnNotAvailable.setText("Cars that are not available currently");
        btnNotAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotAvailableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(265, 265, 265))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(959, 959, 959)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewCarDetails)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteCarDetails))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnManufacturedDateFilter)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnLastUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCityFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(btnMC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSNFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCarsUsedby, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtLastUpdateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtCarsUsedBY, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtMC, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtSNFilter, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtManufacturedDateFilter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(txtCityFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnFirstAvailableCar))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblManufacturerFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboBoxCarManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(503, 503, 503)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtManufacturedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtSerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                        .addComponent(txtManufacturer)
                                        .addComponent(txtSeatCap, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(382, 382, 382)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblLastUpdated)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtMaintenanceCertExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtUsedByPF, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(34, 34, 34)
                                            .addComponent(chkboxAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(236, 236, 236)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblMaintenanceCertExpDate)
                                    .addComponent(lblSeatCapacity)
                                    .addComponent(lblManufacturedDate)
                                    .addComponent(lblCarManufacturer)
                                    .addComponent(lblCarSerialNum)
                                    .addComponent(lblCarModelNum)
                                    .addComponent(lblUsedBy)
                                    .addComponent(lblCity)))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAllAvailableCars))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnNotAvailable)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCity, txtLastUpdated, txtMaintenanceCertExpDate, txtManufacturedDate, txtManufacturer, txtModelNumber, txtSeatCap, txtSerialNumber, txtUsedByPF});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewCarDetails)
                    .addComponent(btnDeleteCarDetails)
                    .addComponent(lblManufacturerFilter)
                    .addComponent(comboBoxCarManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCarModelNum)
                            .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCarSerialNum)
                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCarManufacturer)
                            .addComponent(txtManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblManufacturedDate)
                            .addComponent(txtManufacturedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSeatCapacity)
                            .addComponent(txtSeatCap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsedBy)
                            .addComponent(txtUsedByPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaintenanceCertExpDate)
                            .addComponent(txtMaintenanceCertExpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLastUpdated))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(chkboxAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(btnUpdate)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnAllAvailableCars)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNotAvailable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFirstAvailableCar)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnManufacturedDateFilter)
                                .addGap(18, 18, 18)
                                .addComponent(btnSNFilter)
                                .addGap(18, 18, 18)
                                .addComponent(btnMC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCarsUsedby, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(btnLastUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(btnCityFilter))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtManufacturedDateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(47, 47, 47))
                                        .addComponent(txtSNFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(txtMC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtCarsUsedBY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(68, 68, 68)
                                    .addComponent(txtCityFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(182, 182, 182)
                                    .addComponent(txtLastUpdateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLayeredPane1)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCity, txtLastUpdated, txtMaintenanceCertExpDate, txtManufacturedDate, txtManufacturer, txtModelNumber, txtSeatCap, txtSerialNumber, txtUsedByPF});

    }// </editor-fold>//GEN-END:initComponents

    private void txtModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumberActionPerformed

    private void btnDeleteCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarDetailsActionPerformed
        int selectedRowIndex = tblViewCarInfo.getSelectedRow();
        
        if(selectedRowIndex < 0) {  
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
        Uber selectedCar = (Uber) model.getValueAt(selectedRowIndex, 0);
        
        history.removeCars(selectedCar);
        JOptionPane.showMessageDialog(this, "The selected car has been deleted");
        
        populateTable();
    }//GEN-LAST:event_btnDeleteCarDetailsActionPerformed

    private void btnViewCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCarDetailsActionPerformed
        int selectedRowIndex = tblViewCarInfo.getSelectedRow();
        
        if(selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
        Uber selectedCar = (Uber) model.getValueAt(selectedRowIndex, 0);
        
        txtModelNumber.setText(String.valueOf(selectedCar.getModelName()));
        txtSerialNumber.setText(String.valueOf(selectedCar.getvinNumber()));
        txtManufacturer.setText(selectedCar.getManufacturer());
        txtManufacturedDate.setText(String.valueOf(selectedCar.getManufacturedDate()));
        txtSeatCap.setText(String.valueOf(selectedCar.getSeatCapacity()));
        txtUsedByPF.setText(selectedCar.getUsedBy());
        txtCity.setText(selectedCar.getCity());
        txtMaintenanceCertExpDate.setText(String.valueOf(selectedCar.getMaintenanceCertExpDate()));
        txtLastUpdated.setText(selectedCar.getLastUpdated());
        chkboxAvailable.setState(selectedCar.CarIsAvailable());
    }//GEN-LAST:event_btnViewCarDetailsActionPerformed

    private void btnAllAvailableCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllAvailableCarsActionPerformed

        boolean isAvailable = true;
        populateTableAllAvailable(isAvailable);
        
    }//GEN-LAST:event_btnAllAvailableCarsActionPerformed

    private void comboBoxCarManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCarManufacturerActionPerformed
        populateTable();
    }//GEN-LAST:event_comboBoxCarManufacturerActionPerformed

    private void btnFirstAvailableCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailableCarActionPerformed
        String isAvailable = "true";
        populateTableFirstAvailable();
    }//GEN-LAST:event_btnFirstAvailableCarActionPerformed

    private void btnManufacturedDateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturedDateFilterActionPerformed

        FilterTableOnManufacturedYear();
    }//GEN-LAST:event_btnManufacturedDateFilterActionPerformed

    private void txtManufacturedDateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufacturedDateFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufacturedDateFilterActionPerformed

    private void btnSNFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSNFilterActionPerformed
        // TODO add your handling code here:
        FilterTableSerialNumber();  
    }//GEN-LAST:event_btnSNFilterActionPerformed

    private void txtSNFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSNFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSNFilterActionPerformed

    private void btnCarsUsedbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarsUsedbyActionPerformed
        // TODO add your handling code here:
        
                FilterONTableUsedyManu();
                
    }//GEN-LAST:event_btnCarsUsedbyActionPerformed

    private void txtCarsUsedBYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarsUsedBYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarsUsedBYActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCityFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityFilterActionPerformed
        // TODO add your handling code here:
        
        FilterTableCity();
    }//GEN-LAST:event_btnCityFilterActionPerformed

    private void txtCityFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityFilterActionPerformed

    private void btnLastUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastUpdateActionPerformed
        // TODO add your handling code here:
        FilterOnLastUpdate();
    }//GEN-LAST:event_btnLastUpdateActionPerformed

    private void txtLastUpdateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastUpdateFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastUpdateFilterActionPerformed

    private void btnMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMCActionPerformed
        // TODO add your handling code here:
        FilterOnMC();
    }//GEN-LAST:event_btnMCActionPerformed

    private void txtMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMCActionPerformed

    private void btnNotAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotAvailableActionPerformed
        // TODO add your handling code here:
        boolean isAvailable = false;
        populateTableAllAvailable(isAvailable);
    }//GEN-LAST:event_btnNotAvailableActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllAvailableCars;
    private javax.swing.JButton btnCarsUsedby;
    private javax.swing.JButton btnCityFilter;
    private javax.swing.JButton btnDeleteCarDetails;
    private javax.swing.JButton btnFirstAvailableCar;
    private javax.swing.JButton btnLastUpdate;
    private javax.swing.JButton btnMC;
    private javax.swing.JButton btnManufacturedDateFilter;
    private javax.swing.JButton btnNotAvailable;
    private javax.swing.JButton btnSNFilter;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewCarDetails;
    private java.awt.Checkbox chkboxAvailable;
    private javax.swing.JComboBox<String> comboBoxCarManufacturer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCarManufacturer;
    private javax.swing.JLabel lblCarModelNum;
    private javax.swing.JLabel lblCarSerialNum;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblLastUpdated;
    private javax.swing.JLabel lblMaintenanceCertExpDate;
    private javax.swing.JLabel lblManufacturedDate;
    private javax.swing.JLabel lblManufacturerFilter;
    private javax.swing.JLabel lblSeatCapacity;
    private javax.swing.JLabel lblUsedBy;
    private javax.swing.JTable tblViewCarInfo;
    private javax.swing.JTextField txtCarsUsedBY;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCityFilter;
    private javax.swing.JTextField txtLastUpdateFilter;
    private javax.swing.JTextField txtLastUpdated;
    private javax.swing.JTextField txtMC;
    private javax.swing.JTextField txtMaintenanceCertExpDate;
    private javax.swing.JTextField txtManufacturedDate;
    private javax.swing.JTextField txtManufacturedDateFilter;
    private javax.swing.JTextField txtManufacturer;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtSNFilter;
    private javax.swing.JTextField txtSeatCap;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JTextField txtUsedByPF;
    // End of variables declaration//GEN-END:variables

        private void populateTable() {
            DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
            model.setRowCount(0);

            Object selectedManufacturer = comboBoxCarManufacturer.getSelectedItem();

            for(Uber c: history.getHistory()) {
                if (selectedManufacturer != null && selectedManufacturer.equals(c.getManufacturer())) {
                Object [] row = new Object[10];
                row[0] = c;
                row[1] = c.getvinNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.CarIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getUsedBy();
                    row[8]= c.getLastUpdated();

                model.addRow(row); 
                } else if(selectedManufacturer == null || selectedManufacturer == "All") {
                    Object [] row = new Object[10];
                row[0] = c;
                row[1] = c.getvinNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.CarIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getUsedBy();
                row[8]= c.getLastUpdated(); 
                row[9]= c.getMaintenanceCertExpDate(); 

                model.addRow(row); 
                }
            }

        }

        private void populateTableAllAvailable(boolean isAvailable) {
            DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
            model.setRowCount(0);

            for(Uber c: history.getHistory()) {

                if(c.CarIsAvailable() == isAvailable) {
                    Object [] row = new Object[10];
                    row[0] = c;
                    row[1] = c.getvinNumber();
                    row[2] = c.getManufacturer();
                    row[3] = c.getManufacturedDate();
                    row[4] = c.getSeatCapacity();
                    row[5] = c.CarIsAvailable();
                    row[6] = c.getCity();
                    row[7] = c.getUsedBy();
                    row[8]= c.getLastUpdated();
                row[9]= c.getMaintenanceCertExpDate(); 

                    model.addRow(row);
                }
            }

        }

        private void populateTableFirstAvailable() {
            DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
            model.setRowCount(0);

            for(Uber c: history.getHistory()) {

                if(c.CarIsAvailable() == true) {
                    Object [] row = new Object[10];
                    row[0] = c;
                    row[1] = c.getvinNumber();
                    row[2] = c.getManufacturer();
                    row[3] = c.getManufacturedDate();
                    row[4] = c.getSeatCapacity();
                    row[5] = c.CarIsAvailable();
                    row[6] = c.getCity();
                    row[7] = c.getUsedBy();
                    row[8]= c.getLastUpdated();
                row[9]= c.getMaintenanceCertExpDate(); 

                    if (model.getRowCount() == 0) {
                        model.addRow(row);
                    }
                }
            }

        }
        private void updateTable() {
            int selectedRowIndex = tblViewCarInfo.getSelectedRow();
            int selectedRowColumn = tblViewCarInfo.getSelectedColumn();

            if(selectedRowColumn < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
            return;
            }

            DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
            Uber selectedCar = (Uber) model.getValueAt(selectedRowIndex, selectedRowColumn);
                for(Uber c: history.getHistory()) {

                if(c.CarIsAvailable() == true) {
                    Object [] row = new Object[10];
                    row[0] = c;
                    row[1] = c.getvinNumber();
                    row[2] = c.getManufacturer();
                    row[3] = c.getManufacturedDate();
                    row[4] = c.getSeatCapacity();
                    row[5] = c.CarIsAvailable();
                    row[6] = c.getCity();
                    row[7] = c.getUsedBy();
                    row[8]= c.getLastUpdated();
                row[9]= c.getMaintenanceCertExpDate(); 

                    if (model.getRowCount() == 0) {
                        model.addRow(row);
                    }
                }

        }
        }


        private void FilterTableOnManufacturedYear() {
            DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
            model.setRowCount(0);

            if (txtManufacturedDateFilter.getText().equals(""))
                    {
                                JOptionPane.showMessageDialog(this, " year cant be blank");

                    }
            else{
            int manufacturedYear = Integer.parseInt(txtManufacturedDateFilter.getText());

            for(Uber car: history.getHistory()) {
                int manuYear = car.getManufacturedDate().getYear();

                if(manuYear == manufacturedYear) {
                    Object [] row = new Object[10];
                    row[0] = car;
                    row[1] = car.getvinNumber();
                    row[2] = car.getManufacturer();
                    row[3] = car.getManufacturedDate();
                    row[4] = car.getSeatCapacity();
                    row[5] = car.CarIsAvailable();
                    row[6] = car.getCity();
                    row[7] = car.getUsedBy();
                    row[8]= car.getLastUpdated();
                     row[9]= car.getMaintenanceCertExpDate(); 

                    model.addRow(row);
                }
            }
        }
        }

        private void FilterONTableUsedyManu() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
        model.setRowCount(0);

        if (txtCarsUsedBY.getText().isBlank())
            {
                        JOptionPane.showMessageDialog(this, " input cant be blank");

            }
        else{
        String carsUsedby = txtCarsUsedBY.getText();


        for(Uber c: history.getHistory()) {
        String carsUsed = c.getUsedBy();
        if(carsUsedby.equals(carsUsed)) {
            Object [] row = new Object[10];
            row[0] = c;
            row[1] = c.getvinNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.CarIsAvailable();
            row[6] = c.getCity();
            row[7] = c.getUsedBy();
            row[8]= c.getLastUpdated();
        row[9]= c.getMaintenanceCertExpDate(); 

            model.addRow(row);
        }
        }
        }

        }
        private void update(){


        int SerialNumber = Integer.parseInt(txtSerialNumber.getText());

        for(Uber c: history.getHistory()) {
        if(!txtSerialNumber.getText().isEmpty() && c.getvinNumber() == SerialNumber) {
            LocalDate todaysDate = LocalDate.now();
            boolean available = chkboxAvailable.getState();
            DateTimeFormatter dformatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate localDate = LocalDate.parse(txtManufacturedDate.getText(), dformatter);
            LocalDate manufacturedDate = localDate;
                    java.util.Date date=new java.util.Date(); 
            LocalDate localDateCerExp = LocalDate.parse(txtMaintenanceCertExpDate.getText(), dformatter);
            String  usedBy = txtUsedByPF.getText();
            String manufacturer = txtManufacturer.getText();
            String lastUpdated = String.valueOf(date);

            c.setModelName((txtModelNumber.getText()));
            c.setManufacturedDate(manufacturedDate);
            c.setSeatCapacity(Integer.parseInt(txtSeatCap.getText()));
            c.setCity(txtCity.getText());
            c.setUsedBy(usedBy);
            c.setManufacturer(manufacturer);
            c.setMaintenanceCertExpDate(localDateCerExp);
            c.setLastUpdated(lastUpdated);
            c.setIsAvailable(available);
        }
        }
        populateTable();
        }
        private void FilterTableCity() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
        model.setRowCount(0);

        if (txtCityFilter.getText().isBlank())
            {
                        JOptionPane.showMessageDialog(this, " input cant be blank");

            }
        else{
        String cityFilter = txtCityFilter.getText();


        for(Uber c: history.getHistory()) {
        String city = c.getCity();
        if(city.equals(cityFilter)) {
            Object [] row = new Object[10];
            row[0] = c;
            row[1] = c.getvinNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.CarIsAvailable();
            row[6] = c.getCity();
            row[7] = c.getUsedBy();
            row[8]= c.getLastUpdated();
        row[9]= c.getMaintenanceCertExpDate(); 

            model.addRow(row);
        }
        }
        }}
        private void FilterOnLastUpdate() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
        model.setRowCount(0);

        if (txtLastUpdateFilter.getText().isBlank())
            {
                        JOptionPane.showMessageDialog(this, " input cant be blank");

            }
        else{
        String lastUpdateFilter = txtLastUpdateFilter.getText();


        for(Uber c: history.getHistory()) {
        String lastUpdate = c.getLastUpdated();
        if(lastUpdate.equals(lastUpdateFilter)) {
            Object [] row = new Object[10];
            row[0] = c;
            row[1] = c.getvinNumber();
            row[2] = c.getManufacturer();
            row[3] = c.getManufacturedDate();
            row[4] = c.getSeatCapacity();
            row[5] = c.CarIsAvailable();
            row[6] = c.getCity();
            row[7] = c.getUsedBy();
            row[8]= c.getLastUpdated();
                                row[9]= c.getMaintenanceCertExpDate(); 

            model.addRow(row);
        }
        }}}
        private void FilterOnMC() {
            DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
            model.setRowCount(0);

            if (txtMC.getText().isBlank())
                    {
                                JOptionPane.showMessageDialog(this, " input cant be blank");

                    }
            else{
            String expiredMCfilter = txtMC.getText();


            for(Uber c: history.getHistory()) {
                String expiredMC = String.valueOf(c.getMaintenanceCertExpDate());
                if(expiredMC.equals(expiredMCfilter)) {
                    Object [] row = new Object[10];
                    row[0] = c;
                    row[1] = c.getvinNumber();
                    row[2] = c.getManufacturer();
                    row[3] = c.getManufacturedDate();
                    row[4] = c.getSeatCapacity();
                    row[5] = c.CarIsAvailable();
                    row[6] = c.getCity();
                    row[7] = c.getUsedBy();
                    row[8]= c.getLastUpdated();
                                        row[9]= c.getMaintenanceCertExpDate(); 

                    model.addRow(row);
                }
            }
            }


        }
        private void FilterTableSerialNumber() {
        DefaultTableModel model = (DefaultTableModel) tblViewCarInfo.getModel();
        model.setRowCount(0);
        
        if (txtSNFilter.getText().isBlank())
                {
                  JOptionPane.showMessageDialog(this, " Serial number can't be blank!");

                }
        else{
        int serialNumber = Integer.parseInt(txtSNFilter.getText());
        
        
        for(Uber c: history.getHistory()) {
            int serialNum = c.getvinNumber();
            
            if(serialNum == serialNumber) {
                Object [] row = new Object[10];
                row[0] = c;
                row[1] = c.getvinNumber();
                row[2] = c.getManufacturer();
                row[3] = c.getManufacturedDate();
                row[4] = c.getSeatCapacity();
                row[5] = c.CarIsAvailable();
                row[6] = c.getCity();
                row[7] = c.getUsedBy();
                row[8]= c.getLastUpdated();
            row[9]= c.getMaintenanceCertExpDate(); 

                model.addRow(row);
            }
        }
    }
    }
}
